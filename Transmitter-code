#include <altera_avalon_sgdma.h>
#include <altera_avalon_sgdma_descriptor.h> 	//include the sgdma descriptor
#include <altera_avalon_sgdma_regs.h> 		//include the sgdma registers
#include <altera_avalon_pio_regs.h>		//include the PIO registers
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include "sys/alt_stdio.h"
#include "sys/alt_irq.h"
#include "system.h"


// Function Prototypes
void rx_ethernet_isr (void *context);
void rx_frame_statistics(void *context);

//Transmitter function declaration   
void tx_ethernet ();
// Encryption function declaration 
char  myEncrypt(char str[]);

// Create a receive frame
unsigned char rx_frame[1024] = { 0 };
char q[100];


//Create a transmit frame
unsigned char tx_frame[1024] = {
	0x00,0x00, // for 32-bit alignment
	0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, // destination address (broadcast)
	0x90,0xB1,0x1C,0x83,0xA3,0x7C, // source address
	0x00,0x2E, // length or type of the payload data
};

// Declaration of Data vector to be encrypted
char oriData[] = {'e','l','e','n','a','\0'};
int size_data = sizeof(oriData)/sizeof(oriData[0]);

// Encryption Function -> This function will encrypt the source data in 'oriData' and give the output in vector 'q'

char myEncrypt(char str[])
{
	int n=0,i;
	//char *p=str;
    extern char q [100];    // Declaring the encrytped data vector as a global variable

	
    // Ceasar Cipher Encryption Logic
	for (i=0;i<5;i++)
	{
	 if(islower(*str))
	 {
		 if((*str>='a')&&(*str<'x'))
			 q[n]=toupper(*str + (char)3);
		 else if(*str=='x')
			 q[n]='A';
		 else if(*str=='y')
			 q[n]='B';
		 else
			 q[n]='C';
	 }
	 else
	 {
		 q[n]=*str;

	 }
	 n++;
	 str++;
	 }
	return q;	
}




//Other variables
int in = 0;
int print; 

// Create sgdma transmit and receive devices
alt_sgdma_dev * sgdma_tx_dev;
alt_sgdma_dev * sgdma_rx_dev;

// Allocate descriptors in the descriptor_memory (onchip memory)
alt_sgdma_descriptor tx_descriptor		__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor tx_descriptor_end	__attribute__ (( section ( ".descriptor_memory" )));

alt_sgdma_descriptor rx_descriptor  	__attribute__ (( section ( ".descriptor_memory" )));
alt_sgdma_descriptor rx_descriptor_end  __attribute__ (( section ( ".descriptor_memory" )));


/********************************************************************************
 * This program demonstrates use of the Ethernet in the DE2i-150 board.
********************************************************************************/
int main(void){

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
	if (sgdma_tx_dev == NULL) {
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
		//return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
	if (sgdma_rx_dev == NULL) {
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");



	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );



	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) TSE_BASE;

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x00800220 ) );


	//MAC FIFO Configuration
	*(tse + 0x09)  = TSE_TRANSMIT_FIFO_DEPTH-16;
	*(tse + 0x0E ) = 3;
	*(tse + 0x0D ) = 8;
	*(tse + 0x07 ) = TSE_RECEIVE_FIFO_DEPTH-16;
	*(tse + 0x0C ) = 8;
	*(tse + 0x0B ) = 8;
	*(tse + 0x0A ) = 0;
	*(tse + 0x08 ) = 0;

	// Initialize the MAC address
	*(tse + 0x18) =  0x17231C00;
	*(tse + 0x19 ) = 0x0000CB4A;

	// MAC function configuration
	*(tse + 0x05) = 1518;
	*(tse + 0x17) = 12;
	*(tse + 0x06) = 0xFFFF;
	*(tse + 0x02) = 0x00800220;


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
	while ( *(tse + 0x02) != ( 0x00800220 ) );

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode
	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;

	alt_printf ("We are outside LEDs block.\n");
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );

	
	// Calling the encrytion function for encoding the data
	myEncrypt (oriData);
	
	// Assigning the encrytped data to the transmitted frame vector at respective location 
	tx_frame[16] = q[0];
	tx_frame[17] = q[1];
	tx_frame[18] = q[2];
	tx_frame[19] = q[3];
	tx_frame[20] = q[4];
	tx_frame[21] = q[5];


	while (1) {
		print = in;
		in = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, in); //switch on or switch off the LED

		if (in) {
			if (print != in){
				alt_printf( "Sending Frames..... \n" );
				tx_ethernet();                      // Calling Transmitter function when we use switch 1
				alt_printf( "Frames Sent...!\n");
			}
		}
		else{
			if (print != in) {
				alt_printf( "Switch off LED \n" );
				int stat_total_frames = *(tse + 0x22);
				alt_printf( "Error frames received: %x \n", stat_total_frames);
			}
		}
	}

	return 0;
}

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/

// Receiver function
void rx_ethernet_isr (void *context)
{	
	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in){
		alt_printf( "Destination address: %x,%x,%x.%x.%x.%x\n", rx_frame[2], rx_frame[3], rx_frame[4], rx_frame[5], rx_frame[6], rx_frame[7] ,
				"Source address: %x,%x,%x.%x.%x.%x\n", rx_frame[8], rx_frame[9], rx_frame[10], rx_frame[11], rx_frame[12], rx_frame[13] );
		}
	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0);
	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
}


// Transmit Frame function: Here we have defined and initialized the transmit functions and used for tranmission of data via 'tx_frame' function
void tx_ethernet ()
{
    //This function is used to transmit the data from memory to stream with the length of the frame as 62 and required other parameters given to it 
	alt_avalon_sgdma_construct_mem_to_stream_desc ( &tx_descriptor, &tx_descriptor_end, (alt_u32 *)tx_frame,62,0,1,1,0);
	// Set up non-blocking transfer of sgdma transmit descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_tx_dev, &tx_descriptor );	
	while (alt_avalon_sgdma_check_descriptor_status(&tx_descriptor) != 0);
}



